// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/handlers.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/besean163/gophermart/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// BuildUserToken mocks base method.
func (m *MockAuthService) BuildUserToken(arg0 entities.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildUserToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildUserToken indicates an expected call of BuildUserToken.
func (mr *MockAuthServiceMockRecorder) BuildUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildUserToken", reflect.TypeOf((*MockAuthService)(nil).BuildUserToken), arg0)
}

// GetUser mocks base method.
func (m *MockAuthService) GetUser(login string) *entities.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(*entities.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthServiceMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthService)(nil).GetUser), login)
}

// GetUserByToken mocks base method.
func (m *MockAuthService) GetUserByToken(token string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", token)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockAuthServiceMockRecorder) GetUserByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockAuthService)(nil).GetUserByToken), token)
}

// SaveUser mocks base method.
func (m *MockAuthService) SaveUser(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockAuthServiceMockRecorder) SaveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockAuthService)(nil).SaveUser), arg0)
}

// MockLoyaltyService is a mock of LoyaltyService interface.
type MockLoyaltyService struct {
	ctrl     *gomock.Controller
	recorder *MockLoyaltyServiceMockRecorder
}

// MockLoyaltyServiceMockRecorder is the mock recorder for MockLoyaltyService.
type MockLoyaltyServiceMockRecorder struct {
	mock *MockLoyaltyService
}

// NewMockLoyaltyService creates a new mock instance.
func NewMockLoyaltyService(ctrl *gomock.Controller) *MockLoyaltyService {
	mock := &MockLoyaltyService{ctrl: ctrl}
	mock.recorder = &MockLoyaltyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoyaltyService) EXPECT() *MockLoyaltyServiceMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockLoyaltyService) GetOrder(orderId string) *entities.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderId)
	ret0, _ := ret[0].(*entities.Order)
	return ret0
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockLoyaltyServiceMockRecorder) GetOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockLoyaltyService)(nil).GetOrder), orderId)
}

// GetUserBalance mocks base method.
func (m *MockLoyaltyService) GetUserBalance(userId int) entities.Balance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", userId)
	ret0, _ := ret[0].(entities.Balance)
	return ret0
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockLoyaltyServiceMockRecorder) GetUserBalance(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockLoyaltyService)(nil).GetUserBalance), userId)
}

// GetUserOrders mocks base method.
func (m *MockLoyaltyService) GetUserOrders(userId int) []*entities.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", userId)
	ret0, _ := ret[0].([]*entities.Order)
	return ret0
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockLoyaltyServiceMockRecorder) GetUserOrders(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockLoyaltyService)(nil).GetUserOrders), userId)
}

// GetUserWithdrawals mocks base method.
func (m *MockLoyaltyService) GetUserWithdrawals(userId int) []*entities.Withdrawn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", userId)
	ret0, _ := ret[0].([]*entities.Withdrawn)
	return ret0
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockLoyaltyServiceMockRecorder) GetUserWithdrawals(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockLoyaltyService)(nil).GetUserWithdrawals), userId)
}

// SaveOrder mocks base method.
func (m *MockLoyaltyService) SaveOrder(arg0 entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockLoyaltyServiceMockRecorder) SaveOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockLoyaltyService)(nil).SaveOrder), arg0)
}

// SaveWithdrawn mocks base method.
func (m *MockLoyaltyService) SaveWithdrawn(arg0 entities.Withdrawn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithdrawn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithdrawn indicates an expected call of SaveWithdrawn.
func (mr *MockLoyaltyServiceMockRecorder) SaveWithdrawn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithdrawn", reflect.TypeOf((*MockLoyaltyService)(nil).SaveWithdrawn), arg0)
}

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// GetNotCalcOrders mocks base method.
func (m *MockJobService) GetNotCalcOrders() []*entities.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotCalcOrders")
	ret0, _ := ret[0].([]*entities.Order)
	return ret0
}

// GetNotCalcOrders indicates an expected call of GetNotCalcOrders.
func (mr *MockJobServiceMockRecorder) GetNotCalcOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotCalcOrders", reflect.TypeOf((*MockJobService)(nil).GetNotCalcOrders))
}

// SaveOrder mocks base method.
func (m *MockJobService) SaveOrder(arg0 entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockJobServiceMockRecorder) SaveOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockJobService)(nil).SaveOrder), arg0)
}
